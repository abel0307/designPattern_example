9.2 抽象工厂模式的定义
抽象工厂模式（Abstract Factory Pattern）是一种比较常用的模式，其定义如下：
Provide an interface for creating families of related or dependent objects without specifying
their concrete classes.（为创建一组相关或相互依赖的对象提供一个接口，而且无须指定它们
的具体类。）


9.3 抽象工厂模式的应用
    9.3.1 抽象工厂模式的优点
    ● 封装性，每个产品的实现类不是高层模块要关心的，它要关心的是什么？是接口，是
    抽象，它不关心对象是如何创建出来，这由谁负责呢？工厂类，只要知道工厂类是谁，我就
    能创建出一个需要的对象，省时省力，优秀设计就应该如此。

    ● 产品族内的约束为非公开状态。例如生产男女比例的问题上，猜想女娲娘娘肯定有自
    己的打算，不能让女盛男衰，否则女性的优点不就体现不出来了吗？那在抽象工厂模式，就
    应该有这样的一个约束：每生产1个女性，就同时生产出1.2个男性，这样的生产过程对调用
    工厂类的高层模块来说是透明的，它不需要知道这个约束，我就是要一个黄色女性产品就可
    以了，具体的产品族内的约束是在工厂内实现的。


    9.3.2 抽象工厂模式的缺点
    抽象工厂模式的最大缺点就是产品族扩展非常困难，为什么这么说呢？我们以通用代码
    为例，如果要增加一个产品C，也就是说产品家族由原来的2个增加到3个，看看我们的程序
    有多大改动吧！抽象类AbstractCreator要增加一个方法createProductC()，然后两个实现类都要
    修改，想想看，这严重违反了开闭原则，而且我们一直说明抽象类和接口是一个契约。改变
    契约，所有与契约有关系的代码都要修改，那么这段代码叫什么？叫“有毒代码”，??只要
    与这段代码有关系，就可能产生侵害的危险！

    9.3.3 抽象工厂模式的使用场景
    抽象工厂模式的使用场景定义非常简单：一个对象族（或是一组没有任何关系的对象）
    都有相同的约束，则可以使用抽象工厂模式。什么意思呢？例如一个文本编辑器和一个图片
    处理器，都是软件实体，但是*
    nix下的文本编辑器和Windows下的文本编辑器虽然功能和界
    面都相同，但是代码实现是不同的，图片处理器也有类似情况。也就是具有了共同的约束条
    件：操作系统类型。于是我们可以使用抽象工厂模式，产生不同操作系统下的编辑器和图片
    处理器。

    9.3.4 抽象工厂模式的注意事项
    在抽象工厂模式的缺点中，我们提到抽象工厂模式的产品族扩展比较困难，但是一定要
    清楚，是产品族扩展困难，而不是产品等级。在该模式下，产品等级是非常容易扩展的，增
    加一个产品等级，只要增加一个工厂类负责新增加出来的产品生产任务即可。也就是说横向
    扩展容易，纵向扩展困难。以人类为例子，产品等级中只有男、女两个性别，现实世界还有
    一种性别：双性人，既是男人也是女人（俗语就是阴阳人），那我们要扩展这个产品等级也
    是非常容易的，增加三个产品类，分别对应不同的肤色，然后再创建一个工厂类，专门负责
    不同肤色人的双性人的创建任务，完全通过扩展来实现需求的变更，从这一点上看，抽象工
    厂模式是符合开闭原则的。