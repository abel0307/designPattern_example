第5章 迪米特法则
5.1 迪米特法则的定义
迪米特法则（Law of Demeter，LoD）也称为最少知识原则（Least Knowledge
Principle，LKP），虽然名字不同，但描述的是同一个规则：一个对象应该对其他对象有最
少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，你（被耦合或调
用的类）的内部是如何复杂都和我没关系，那是你的事情，我就知道你提供的这么多public
方法，我就调用这么多，其他的我一概不关心


5.2 我的知识你知道得越少越好
迪米特法则对类的低耦合提出了明确的要求，其包含以下4层含义。
1. 只和朋友交流
迪米特法则还有一个英文解释是：Only talk to your immediate friends（只与直接的朋友通
信。）什么叫做直接的朋友呢？每个对象都必然会与其他对象有耦合关系，两个对象之间的
耦合就成为朋友关系，这种关系的类型有很多，例如组合、聚合、依赖等。下面我们将举例
说明如何才能做到只与直接的朋友交流。

注意 一个类只和朋友交流，不与陌生类交流，不要出现getA().getB().getC().getD()这种
情况（在一种极端的情况下允许出现这种访问，即每一个点号后面的返回类型都相同），类
与类之间的关系是建立在类间的，而不是方法间，因此一个方法尽量不引入一个类中不存在
的对象，当然，JDK API提供的类除外


2. 朋友间也是有距离的
人和人之间是有距离的，太远关系逐渐疏远，最终形同陌路；太近就相互刺伤。对朋友
关系描述最贴切的故事就是：两只刺猬取暖，太远取不到暖，太近刺伤了对方，必须保持一
个既能取暖又不刺伤对方的距离。迪米特法则就是对这个距离进行描述，即使是朋友类之间
也不能无话不说，无所不知

注意 迪米特法则要求类“羞涩”一点，尽量不要对外公布太多的public方法和非静态的
public变量，尽量内敛，多使用private、package-private、protected等访问权限。


3. 是自己的就是自己的
在实际应用中经常会出现这样一个方法：放在本类中也可以，放在其他类中也没有错，
那怎么去衡量呢？你可以坚持这样一个原则：如果一个方法放在本类中，既不增加类间关
系，也对本类不产生负面影响，那就放置在本类中。
4. 谨慎使用Serializable
在实际应用中，这个问题是很少出现的，即使出现也会立即被发现并得到解决。是怎么
回事呢？举个例子来说，在一个项目中使用RMI（Remote Method Invocation，远程方法调
用）方式传递一个VO（Value Object，值对象），这个对象就必须实现Serializable接口（仅
仅是一个标志性接口，不需要实现具体的方法），也就是把需要网络传输的对象进行序列
化，否则就会出现NotSerializableException异常。突然有一天，客户端的VO修改了一个属性
的访问权限，从private变更为public，访问权限扩大了，如果服务器上没有做出相应的变
更，就会报序列化失败，就这么简单。但是这个问题的产生应该属于项目管理范畴，一个类
或接口在客户端已经变更了，而服务器端却没有同步更新，难道不是项目管理的失职吗？


5.3 最佳实践
迪米特法则的核心观念就是类间解耦，弱耦合，只有弱耦合了以后，类的复用率才可以
提高。其要求的结果就是产生了大量的中转或跳转类，导致系统的复杂性提高，同时也为维
护带来了难度。读者在采用迪米特法则时需要反复权衡，既做到让结构清晰，又做到高内聚
低耦合