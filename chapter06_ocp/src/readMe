第6章 开闭原则
6.1 开闭原则的定义
在哲学上，矛盾法则即对立统一的法则，是唯物辩证法的最根本法则。本章要讲的开闭
原则是不是也有同样的重要性且具有普遍性呢？确实，开闭原则是Java世界里最基础的设计
原则，它指导我们如何建立一个稳定的、灵活的系统，先来看开闭原则的定义：
Software entities like classes,modules and functions should be open for extension but closed for
modifications.（一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。）

6.2 开闭原则的庐山真面目
开闭原则的定义已经非常明确地告诉我们：软件实体应该对扩展开放，对修改关闭，其
含义是说一个软件实体应该通过扩展来实现变化，而不是通过修改已有的代码来实现变化。
那什么又是软件实体呢？软件实体包括以下几个部分：
● 项目或软件产品中按照一定的逻辑规则划分的模块。
● 抽象和类。
● 方法。
一个软件产品只要在生命期内，都会发生变化，既然变化是一个既定的事实，我们就应
该在设计时尽量适应这些变化，以提高项目的稳定性和灵活性，真正实现“拥抱变化”。开闭
原则告诉我们应尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来完
成变化，它是为软件实体的未来事件而制定的对现行开发设计进行约束的一个原则。



6.3 为什么要采用开闭原则
每个事物的诞生都有它存在的必要性，存在即合理，那开闭原则的存在也是合理的，为
什么这么说呢？
首先，开闭原则非常著名，只要是做面向对象编程的，甭管是什么语言，Java也
好，C++也好，或者是Smalltalk，在开发时都会提及开闭原则。
其次，开闭原则是最基础的一个原则，前五章节介绍的原则都是开闭原则的具体形态，
也就是说前五个原则就是指导设计的工具和方法，而开闭原则才是其精神领袖。换一个角度
来理解，依照Java语言的称谓，开闭原则是抽象类，其他五大原则是具体的实现类，开闭原
则在面向对象设计领域中的地位就类似于牛顿第一定律在力学、勾股定律在几何学、质能方
程在狭义相对论中的地位，其地位无人能及。
最后，开闭原则是非常重要的，可通过以下几个方面来理解其重要性。
1. 开闭原则对测试的影响

2. 开闭原则可以提高复用性
在面向对象的设计中，所有的逻辑都是从原子逻辑组合而来的，而不是在一个类中独立
实现一个业务逻辑。只有这样代码才可以复用，粒度越小，被复用的可能性就越大。那为什
么要复用呢？减少代码量，避免相同的逻辑分散在多个角落，避免日后的维护人员为了修改
一个微小的缺陷或增加新功能而要在整个项目中到处查找相关的代码，然后发出对开发人
员“极度失望”的感慨。那怎么才能提高复用率呢？缩小逻辑粒度，直到一个逻辑不可再拆分
为止。
3. 开闭原则可以提高可维护性
一款软件投产后，维护人员的工作不仅仅是对数据进行维护，还可能要对程序进行扩
展，维护人员最乐意做的事情就是扩展一个类，而不是修改一个类，甭管原有的代码写得多
么优秀还是多么糟糕，让维护人员读懂原有的代码，然后再修改，是一件很痛苦的事情，不
要让他在原有的代码海洋里游弋完毕后再修改，那是对维护人员的一种折磨和摧残。
4. 面向对象开发的要求
万物皆对象，我们需要把所有的事物都抽象成对象，然后针对对象进行操作，但是万物
皆运动，有运动就有变化，有变化就要有策略去应对，怎么快速应对呢？这就需要在设计之
初考虑到所有可能变化的因素，然后留下接口，等待“可能”转变为“现实”。


6.5 最佳实践
软件设计最大的难题就是应对需求的变化，但是纷繁复杂的需求变化又是不可预料的。
我们要为不可预料的事情做好准备，这本身就是一件非常痛苦的事情，但是大师们还是给我
们提出了非常好的6大设计原则以及23个设计模式来“封装”未来的变化，我们在前5章中讲过
如下设计原则。
● Single Responsibility Principle：单一职责原则
● Open Closed Principle：开闭原则
● Liskov Substitution Principle：里氏替换原则
● Law of Demeter：迪米特法则
● Interface Segregation Principle：接口隔离原则
● Dependence Inversion Principle：依赖倒置原则
把这6个原则的首字母（里氏替换原则和迪米特法则的首字母重复，只取一个）联合起
来就是SOLID（solid，稳定的），其代表的含义也就是把这6个原则结合使用的好处：建立
稳定、灵活、健壮的设计，而开闭原则又是重中之重，是最基础的原则，是其他5大原则的
精神领袖。我们在使用开闭原则时要注意以下几个问题。
● 开闭原则也只是一个原则
开闭原则只是精神口号，实现拥抱变化的方法非常多，并不局限于这6大设计原则，但
是遵循这6大设计原则基本上可以应对大多数变化。因此，我们在项目中应尽量采用这6大原
则，适当时候可以进行扩充，例如通过类文件替换的方式完全可以解决系统中的一些缺陷。
大家在开发中比较常用的修复缺陷的方法就是类替换，比如一个软件产品已经在运行中，发
现了一个缺陷，需要修正怎么办？如果有自动更新功能，则可以下载一个.class文件直接覆
盖原有的class，重新启动应用（也不一定非要重新启动）就可以解决问题，也就是通过类文
件的替换方式修正了一个缺陷，当然这种方式也可以应用到项目中，正在运行中的项目发现
需要增加一个新功能，通过修改原有实现类的方式就可以解决这个问题，前提条件是：类必
须做到高内聚、低耦合，否则类文件的替换会引起不可预料的故障。
